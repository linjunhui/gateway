package com.cqupt.demov1;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.util.List;

import org.apache.http.util.ByteArrayBuffer;

import android.os.Handler;
import android.os.Message;

public class homeProtocol {
	
	Handler mHandler;
	List devicelist;
	
	public homeProtocol(Handler mHandler, List devicelist) {
		// TODO Auto-generated constructor stub
		this.mHandler = mHandler;
		this.devicelist = devicelist;
	}
	
	public homeProtocol() {
		// TODO Auto-generated constructor stub
	}
	
	
	//in_addr 转ip字符串
	public String inAddrtoIP(int addr) {
		
		StringBuffer sb=new StringBuffer(""); 
		sb.append(String.valueOf(addr>>>24));//直接右移24位 
		sb.append("."); 
		sb.append(String.valueOf((addr&0x00FFFFFF)>>>16)); //将高8位置0，然后右移16位 
		sb.append("."); 
		sb.append(String.valueOf((addr&0x0000FFFF)>>>8)); 
		sb.append("."); 
		sb.append(String.valueOf(addr&0x000000FF)); 
		return sb.toString(); 
				
	}
	
	//组建数据单元
	public ByteBuffer assemData(short msgtype, int inaddr, ByteBuffer content) {
		
		int length ;
		ByteBuffer PDU = null;
		if (content != null){
			length = content.capacity() + 6 ;
			PDU = ByteBuffer.allocate(length);
			PDU.putShort(msgtype);			
			PDU.putInt(inaddr);
			PDU.put(content.array());
		}
			
		else {
			length = 6;
			PDU = ByteBuffer.allocate(length);
			PDU.putShort(msgtype);	
			PDU.putInt(inaddr);
		}
			
		

		
		
		return PDU;
	}
	
	//发送PDU
	public void SendPDU(final ByteBuffer pdu, final String ip) {
		
		Thread t = new Thread() {
            public void run() {
                try {
                    Socket socket = new Socket(ip, 6547);
                    char[] buffer = new char[200];
                    System.out.println("建立socket");
                    
                    OutputStream outputStream = socket.getOutputStream();
                    outputStream.write(pdu.array());
                    //outputStream.write(ss.getBytes());
                   
                    outputStream.flush();
                    
                    
                    //发送完后等待回复
                    //BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                    BufferedInputStream br = new BufferedInputStream(socket.getInputStream()); 
						

                    dealMsg(br);
//                    String line;
//                    char[] buf = new char[28];
//                    
//                    br.read(buf);
//                    int i =  0;
//                    for(char ch: buf) {
//                    	i++;
//                    	System.out.println(i + "ch:" + (int)ch);
//                    	
//                    }
//                    	
//                    System.out.println("ch:" + buf[6]);
//                    System.out.println("ch:" + buf[7]);
//                    
//                    while ((line = br.readLine()) != null) {
//                    	i++;
//                        System.out.println("line:" + line);
//                       
//                        dealMsg(line);
//                        
//                    }
                    
                    /*
                     * while ((line = br.readLine()) != null) {
                        System.out.println("line:" + line);}
                     * 
                     */
                    
                    

//                   
//                   short msgtype = (short)(bt[0]|(short)bt[1] << 8) ;                   
//                   System.out.println("msgtype:" + msgtype);
                    
                    System.out.println("receive end");

                    
                    //socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        };
        t.start();
		
	}
	
	public void dealMsg(BufferedInputStream br) throws IOException{
		
		byte[] bc = new byte[28];
		int fl;
		int i = 0;
		while((fl=br.read(bc, 28 * i, 28)) != -1) {
			i++;
			short msgtype = (short)(bc[0]|(short)bc[1] << 8) ;
			   
	        System.out.println("msgtype:" + msgtype);
	        if(0x0002 == msgtype) {
	        	Message omsg = new Message();
	        	omsg.what = 0;
	        	
	        	mHandler.sendMessage(omsg);
	        } else if(0x0004 == msgtype) {
	        	
	        	
	        	System.out.println("收到device:" + msgtype);
	        	
	        	int ip = (int)(bc[2]&0x0ff) + ((int)(bc[3]&0x0ff)<<8) + ((int)(bc[4]&0x0ff)<<16) + ((int)(bc[5]&0x0ff)<<24);
	        	String strip = inAddrtoIP(ip);
	        	//System.out.println("2:" + String.valueOf(i) + " 2:" + String.valueOf(i));
	        	System.out.println("收到device IP:" + strip);
	        	
	        	String name = new String(bc, 6, 21);
	        	int index = name.indexOf('\0');
	        	name = name.substring(0, index);
	        	System.out.println("收到index:" + index);
	        	System.out.println("收到device name:" + name);
	        	
	        	Device device = new Device();
	        	
	        	device.name = name;
	        	device.ip = strip;
	        	
	        	devicelist.add(device);
	        	
	        	Message omsg = new Message();
	        	omsg.what = 1;
	        	
	        	mHandler.sendMessage(omsg);
			
		}
		
		//br.read(bc);
		
		
		
		
//      int i =  0;
//      for(byte ch: bc) {
//      	i++;
//      	System.out.println(i + "ch:" + (int)(ch&0x0FF));
//      	
//      }	
//		
//		
//        System.out.println("bt 的 length:" + bc.length);
//        
//        	
//        	int x = bc[2] & 0x0FF;
//        	System.out.println("x:" + x);
	        
	        System.out.println("完成");
        }
	}
	
}
