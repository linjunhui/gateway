package com.example.demov2;

import java.nio.ByteBuffer;
import java.nio.channels.GatheringByteChannel;

import com.zxing.activity.CaptureActivity;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;

public class MainActivity extends Activity {
	
	public String gateID;
	public String gateIp;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}
	
	
	
	//================扫码获得网关的IP=======
	//扫描网关的ID,在元件清单中要添加扫描界面的Activity
	public void scanID(View v) {
		Intent intent = new Intent(MainActivity.this, CaptureActivity.class);
		
		startActivityForResult(intent, 0);
	}
	
	//扫描二维码获得结果后开始处理
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		// TODO Auto-generated method stub
		super.onActivityResult(requestCode, resultCode, data);

		if(resultCode == RESULT_OK) {
			
			gateID = data.getExtras().getString("result");
			System.out.println("ID:" + gateID);
			//connectServer conn = new connectServer();
			//gateIp = conn.connectserver(gateID);

			//System.out.println("返回IP:" + gateIp);
			
			//得到gate的IP后开始连接gate
//			homeProtocol hp = new homeProtocol();
//			int ip = 0;
//			ByteBuffer bf = null;
//			short msgtype = 0x0001;
//			ByteBuffer pdu = hp.assemData(msgtype, ip, bf);
//			hp.SendPDU(pdu, gateIp);
//			
//			homeProtocol hp = new homeProtocol(mHandler, devicelist);
//			int ip = 0xc0a80390;
//			short msgtype = 0x0001;
//			ByteBuffer pdu = hp.assemData(msgtype, ip, null);
//			hp.SendPDU(pdu, gateIp);
		}
	}
}
